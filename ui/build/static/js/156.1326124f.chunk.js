(this["webpackJsonpblog-site"]=this["webpackJsonpblog-site"]||[]).push([[156],{168:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.withMDXComponents=void 0;var a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r=s(t(1)),o=s(t(173)),c=s(t(7));function s(e){return e&&e.__esModule?e:{default:e}}var i=(0,o.default)({}),p=i.Provider,l=i.Consumer;n.withMDXComponents=function(e){return function(n){var t=n.components,o=function(e,n){var t={};for(var a in e)n.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}(n,["components"]);return r.default.createElement(l,null,(function(n){return r.default.createElement(e,a({components:t||n},o))}))}};var u=function(e){var n=e.components,t=e.children;return r.default.createElement(p,{value:n},t)};u.propTypes={components:c.default.object.isRequired,children:c.default.element.isRequired},n.default=u},170:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(171);Object.defineProperty(n,"MDXTag",{enumerable:!0,get:function(){return o(a).default}});var r=t(168);function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"MDXProvider",{enumerable:!0,get:function(){return o(r).default}})},171:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}(),o=t(1),c=p(o),s=p(t(172)),i=t(168);function p(e){return e&&e.__esModule?e:{default:e}}function l(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==typeof n&&"function"!==typeof n?e:n}var _={inlineCode:"code",wrapper:"div"},m=function(e){function n(){return l(this,n),u(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),r(n,[{key:"render",value:function(){var e=this.props,n=e.name,t=e.parentName,r=e.props,o=void 0===r?{}:r,i=e.children,p=e.components,l=void 0===p?{}:p,u=e.Layout,m=e.layoutProps,f=l[t+"."+n]||l[n]||_[n]||n;return u?((0,s.default)(this,u),c.default.createElement(u,a({components:l},m),c.default.createElement(f,o,i))):c.default.createElement(f,o,i)}}]),n}(o.Component);n.default=(0,i.withMDXComponents)(m)},172:function(e,n,t){"use strict";var a={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o=Object.defineProperty,c=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,l=p&&p(Object);e.exports=function e(n,t,u){if("string"!==typeof t){if(l){var _=p(t);_&&_!==l&&e(n,_,u)}var m=c(t);s&&(m=m.concat(s(t)));for(var f=0;f<m.length;++f){var b=m[f];if(!a[b]&&!r[b]&&(!u||!u[b])){var d=i(t,b);try{o(n,b,d)}catch(h){}}}return n}return n}},173:function(e,n,t){"use strict";n.__esModule=!0;var a=o(t(1)),r=o(t(174));function o(e){return e&&e.__esModule?e:{default:e}}n.default=a.default.createContext||r.default,e.exports=n.default},174:function(e,n,t){"use strict";n.__esModule=!0;var a=t(1),r=(c(a),c(t(7))),o=c(t(175));c(t(176));function c(e){return e&&e.__esModule?e:{default:e}}function s(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function i(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==typeof n&&"function"!==typeof n?e:n}function p(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var l=1073741823;function u(e){var n=[];return{on:function(e){n.push(e)},off:function(e){n=n.filter((function(n){return n!==e}))},get:function(){return e},set:function(t,a){e=t,n.forEach((function(n){return n(e,a)}))}}}n.default=function(e,n){var t,c,_="__create-react-context-"+(0,o.default)()+"__",m=function(e){function t(){var n,a;s(this,t);for(var r=arguments.length,o=Array(r),c=0;c<r;c++)o[c]=arguments[c];return n=a=i(this,e.call.apply(e,[this].concat(o))),a.emitter=u(a.props.value),i(a,n)}return p(t,e),t.prototype.getChildContext=function(){var e;return(e={})[_]=this.emitter,e},t.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t=this.props.value,a=e.value,r=void 0;((o=t)===(c=a)?0!==o||1/o===1/c:o!==o&&c!==c)?r=0:(r="function"===typeof n?n(t,a):l,0!==(r|=0)&&this.emitter.set(e.value,r))}var o,c},t.prototype.render=function(){return this.props.children},t}(a.Component);m.childContextTypes=((t={})[_]=r.default.object.isRequired,t);var f=function(n){function t(){var e,a;s(this,t);for(var r=arguments.length,o=Array(r),c=0;c<r;c++)o[c]=arguments[c];return e=a=i(this,n.call.apply(n,[this].concat(o))),a.state={value:a.getValue()},a.onUpdate=function(e,n){0!==((0|a.observedBits)&n)&&a.setState({value:a.getValue()})},i(a,e)}return p(t,n),t.prototype.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=void 0===n||null===n?l:n},t.prototype.componentDidMount=function(){this.context[_]&&this.context[_].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?l:e},t.prototype.componentWillUnmount=function(){this.context[_]&&this.context[_].off(this.onUpdate)},t.prototype.getValue=function(){return this.context[_]?this.context[_].get():e},t.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(a.Component);return f.contextTypes=((c={})[_]=r.default.object,c),{Provider:m,Consumer:f}},e.exports=n.default},175:function(e,n,t){"use strict";(function(n){var t="__global_unique_id__";e.exports=function(){return n[t]=(n[t]||0)+1}}).call(this,t(63))},176:function(e,n,t){"use strict";var a=t(177);e.exports=a},177:function(e,n,t){"use strict";function a(e){return function(){return e}}var r=function(){};r.thatReturns=a,r.thatReturnsFalse=a(!1),r.thatReturnsTrue=a(!0),r.thatReturnsNull=a(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},179:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,"a",(function(){return a}))},228:function(e,n,t){"use strict";t.r(n);var a=t(179),r=t(1),o=t.n(r),c=t(170),s=(t(5),t(47)),i=["components"];n.default=function(e){var n=e.components;Object(a.a)(e,i);return o.a.createElement(c.MDXTag,{name:"wrapper",components:n},o.a.createElement(s.a,null,o.a.createElement("meta",{property:"og:type",content:"article"}),o.a.createElement("meta",{name:"title",property:"og:title",content:"The magic of Infrastructure as Code with Terraform"}),o.a.createElement("meta",{property:"og:url",content:"https://arthurdayton.com/post/5/"}),o.a.createElement("meta",{name:"image",property:"og:image",content:"%PUBLIC_URL%/images/5/preview.png"}),o.a.createElement("meta",{name:"description",property:"og:description",content:"This post shows hows to use maps and for-each loops with Terraform to dynamically create infrastructure on AWS"}),o.a.createElement("meta",{property:"article:author",content:"Arthur Dayton"}),o.a.createElement("meta",{property:"article:published_date",content:"2022-02-16"}),o.a.createElement("meta",{property:"article:tag",content:"Terraform"}),o.a.createElement("meta",{property:"article:tag",content:"AWS"}),o.a.createElement("meta",{property:"article:tag",content:"Docker"}),o.a.createElement("meta",{property:"article:tag",content:"VPC"}),o.a.createElement("meta",{property:"article:tag",content:"Terraform maps"}),o.a.createElement("meta",{property:"article:tag",content:"Terraform for each"}),o.a.createElement("meta",{property:"article:tag",content:"EC2"})),o.a.createElement(c.MDXTag,{name:"h4",components:n},"Using maps and for-each to kick it up a notch"),o.a.createElement(c.MDXTag,{name:"p",components:n},"Infrastructure as code is the standard for cloud development that all companies are trying to achieve.  ",o.a.createElement("a",{href:"https://dzone.com/articles/the-top-7-infrastructure-as-code-tools-for-automat",target:"_blank"},"Lots of tools exist")," but I'm a big fan of Terraform, especially over learning cloud vendor specific tools like Cloud Formation or ARM, because of the ease with which I can do similar things on different clouds, state management with ",o.a.createElement("a",{href:"https://www.terraform.io/cloud",target:"_blank"},"Terraform Cloud")," and their ever expanding ",o.a.createElement("a",{href:"https://registry.terraform.io/browse/providers",target:"_blank"},"list of providers"),".  Deploying single stand alone resources is easy and for a lot of scenarios that's fine but what happens when we have more complex scenarios where we need to deploy multiple types of resources that have interdependencies, different lifecycles and n number of instances?  This is where infrastructure as code becomes more like development then configuration and the power of maps and loops in Terraform shines."),o.a.createElement("br",null),o.a.createElement(c.MDXTag,{name:"p",components:n},o.a.createElement("a",{pl:2,href:"https://www.terraform.io/docs/language/expressions/types.html",target:"_blank"},"Terraform types ")," include maps which allow us to define hierarchical objects which we can iterate over and output to be used by other processes.  The scenario I need to accommodate is creating multiple peered VPCs, subnets and compute instances.  The number of all is arbitrary and I need to be able to iterate the results of the creation of my VPCs to create the subnets and EC2 instances."),o.a.createElement("br",null),o.a.createElement(c.MDXTag,{name:"p",components:n},o.a.createElement("a",{p:4,href:"https://github.com/arthurdayton116/aws-terraform/tree/main/peering/terraform_vpc_peering",target:"_blank"},"Code located here")),o.a.createElement("br",null),o.a.createElement(c.MDXTag,{name:"p",components:n},"I will start by using a local variable to define the configuration of my VPCs"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'locals {\n  vpc_values = {\n    a = {\n      name      = "${local.resource_prefix}-vpc",\n      cidr_vpc  = "10.1.0.0/16",\n      region    = local.region\n      security_group_ingress_cidr   = ["10.1.0.0/16", "10.2.0.0/16"]\n      peer_cidr = "10.2.0.0/16"\n    },\n    b = {\n      name      = "${local.resource_prefix}-vpc",\n      cidr_vpc  = "10.2.0.0/16",\n      region    = local.region,\n      security_group_ingress_cidr   = ["10.1.0.0/16", "10.2.0.0/16"]\n      peer_cidr = "10.1.0.0/16"\n    },\n  }\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"Looking at the vpc_values we see values for two VPCs, a and b, with cidr ranges for the vpc and ranges for defining peering realationships and security groups."),o.a.createElement(c.MDXTag,{name:"p",components:n},"There are two approaches, count and for_each, to create multiple instances of resources with Terraform.  When to use one or the other is described ",o.a.createElement("a",{href:"https://www.terraform.io/docs/language/meta-arguments/count.html#when-to-use-for_each-instead-of-count",target:"_blank"},"here.")),o.a.createElement(c.MDXTag,{name:"p",components:n},"To create VPCs from these values we use a ",o.a.createElement("a",{href:"https://www.terraform.io/docs/language/meta-arguments/for_each.html",target:"_blank"},"for_each")," loop:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'resource "aws_vpc" "vpc" {\n  for_each             = local.vpc_values\n  cidr_block           = each.value.cidr_vpc\n  instance_tenancy     = "default"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"We pass the local variable to a resource definition and then can reference the values within the object using the each property.  This allows us to use one resource definition to create an arbitrary number of resources.  We can reference our vpc resource definition in other resources, again using the for_each property, like I do here with internet gateway resource to access the VPC id (each.value.id) and the vpc keys (each.key):"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'resource "aws_internet_gateway" "i" {\n  for_each = aws_vpc.vpc\n  vpc_id   = each.value.id\n  tags = merge(\n    local.base_tags,\n    {\n      Name = "${local.resource_prefix}-vpc${each.key}-igw"\n    },\n  )\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"We can use the ",o.a.createElement("a",{href:"https://www.terraform.io/docs/language/expressions/for.html",target:"_blank"},"for")," expression in our outputs to create maps of values to reference in other terrafom projects downstream:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'output "vpc_ids" {\n  value = {\n    for k, vpc in aws_vpc.vpc :\n    k => vpc.id\n  }\n}\n\noutput "vpc_info" {\n  value = {\n    for k, vpc in aws_vpc.vpc :\n    k => vpc\n  }\n}\n\noutput "vpc_config" {\n  value = {\n    for k, vpc in local.vpc_values :\n    k => vpc\n  }\n}\n\noutput "igw_ids" {\n  value = {\n    for k, igw in aws_internet_gateway.i :\n    k => igw.id\n  }\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"produces:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'vpc_ids = {\n  "a" = "vpc-01e64fe235cb0c529"\n  "b" = "vpc-079dd05c64c0a3ebe"\n}\n\nvpc_info = {\n  "a" = {\n    "arn" = "arn:aws:ec2:us-west-2:793219755011:vpc/vpc-01e64fe235cb0c529"\n    "assign_generated_ipv6_cidr_block" = false\n    "cidr_block" = "10.1.0.0/16"\n    "default_network_acl_id" = "acl-015de4d9c963111ab"\n    "default_route_table_id" = "rtb-0317b663263959e41"\n    "default_security_group_id" = "sg-0806180aa07a0b29a"\n    "dhcp_options_id" = "dopt-7754a212"\n    "enable_classiclink" = false\n    "enable_classiclink_dns_support" = false\n    "enable_dns_hostnames" = true\n    "enable_dns_support" = true\n    "id" = "vpc-01e64fe235cb0c529"\n    "instance_tenancy" = "default"\n    "ipv6_association_id" = ""\n    "ipv6_cidr_block" = ""\n    "main_route_table_id" = "rtb-0317b663263959e41"\n    "owner_id" = "793219755011"\n    "tags" = tomap({\n      "Name" = "sample-company-vpc-a"\n      "billTo" = "study"\n      "createdBy" = "terraform"\n      "directory" = "peering/terraform_vpc_peering"\n      "environment" = "production"\n      "owner" = "Sample Company"\n    })\n  }\n  "b" = {\n    "arn" = "arn:aws:ec2:us-west-2:793219755011:vpc/vpc-079dd05c64c0a3ebe"\n    "assign_generated_ipv6_cidr_block" = false\n    "cidr_block" = "10.2.0.0/16"\n    "default_network_acl_id" = "acl-037ba106a3cc0cc8e"\n    "default_route_table_id" = "rtb-0972dfffc68a8f736"\n    "default_security_group_id" = "sg-0858668e97965b657"\n    "dhcp_options_id" = "dopt-7754a212"\n    "enable_classiclink" = false\n    "enable_classiclink_dns_support" = false\n    "enable_dns_hostnames" = true\n    "enable_dns_support" = true\n    "id" = "vpc-079dd05c64c0a3ebe"\n    "instance_tenancy" = "default"\n    "ipv6_association_id" = ""\n    "ipv6_cidr_block" = ""\n    "main_route_table_id" = "rtb-0972dfffc68a8f736"\n    "owner_id" = "793219755011"\n    "tags" = tomap({\n      "Name" = "sample-company-vpc-b"\n      "billTo" = "study"\n      "createdBy" = "terraform"\n      "directory" = "peering/terraform_vpc_peering"\n      "environment" = "production"\n      "owner" = "Sample Company"\n    })\n  }\n}\n\nvpc_config = {\n  "a" = {\n    "cidr_vpc" = "10.1.0.0/16"\n    "name" = "sample-company-vpc"\n    "peer_cidr" = "10.2.0.0/16"\n    "region" = "us-west-2"\n    "sg_cidr" = [\n      "10.1.0.0/16",\n      "10.2.0.0/16",\n    ]\n  }\n  "b" = {\n    "cidr_vpc" = "10.2.0.0/16"\n    "name" = "sample-company-vpc"\n    "peer_cidr" = "10.1.0.0/16"\n    "region" = "us-west-2"\n    "sg_cidr" = [\n      "10.1.0.0/16",\n      "10.2.0.0/16",\n    ]\n  }\n}\n\nigw_ids = {\n  "a" = "igw-0c5265d2efc316c84"\n  "b" = "igw-0a029debee5da18f3"\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"Next I want to create subnets in my VPCs and can again use a local variable to create a map:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'locals {\n  subnets = {\n    a_a = {\n      vpc_key     = "a",\n      zone        = "${local.region}a",\n      cidr_block  = "10.1.0.0/19"\n      public      = "true"\n      nat_gateway = "true"\n      api_ip      = "10.1.96.10"\n    },\n    a_b = {\n      vpc_key     = "a",\n      zone        = "${local.region}b",\n      cidr_block  = "10.1.32.0/19"\n      public      = "true"\n      nat_gateway = "false"\n      api_ip      = "10.1.128.10"\n    },\n    a_c = {\n      vpc_key     = "a",\n      zone        = "${local.region}c",\n      cidr_block  = "10.1.64.0/19"\n      public      = "true"\n      nat_gateway = "false"\n      api_ip      = "10.1.160.10"\n    },\n    a_d = {\n      vpc_key     = "a",\n      zone        = "${local.region}a",\n      cidr_block  = "10.1.96.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.1.96.10"\n    },\n    a_e = {\n      vpc_key     = "a",\n      zone        = "${local.region}b",\n      cidr_block  = "10.1.128.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.1.128.10"\n    },\n    a_f = {\n      vpc_key     = "a",\n      zone        = "${local.region}c",\n      cidr_block  = "10.1.160.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.1.160.10"\n    },\n    b_a = {\n      vpc_key     = "b",\n      zone        = "${local.region}a",\n      cidr_block  = "10.2.0.0/19"\n      public      = "true"\n      nat_gateway = "true"\n      api_ip      = "10.2.96.10"\n    },\n    b_b = {\n      vpc_key     = "b",\n      zone        = "${local.region}b",\n      cidr_block  = "10.2.32.0/19"\n      public      = "true"\n      nat_gateway = "false"\n      api_ip      = "10.2.128.10"\n    },\n    b_c = {\n      vpc_key     = "b",\n      zone        = "${local.region}c",\n      cidr_block  = "10.2.64.0/19"\n      public      = "true"\n      nat_gateway = "false"\n      api_ip      = "10.2.160.10"\n    }\n    b_d = {\n      vpc_key     = "b",\n      zone        = "${local.region}a",\n      cidr_block  = "10.2.96.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.2.96.10"\n    },\n    b_e = {\n      vpc_key     = "b",\n      zone        = "${local.region}b",\n      cidr_block  = "10.2.128.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.2.128.10"\n    },\n    b_f = {\n      vpc_key     = "b",\n      zone        = "${local.region}c",\n      cidr_block  = "10.2.160.0/19"\n      public      = "false"\n      nat_gateway = "false"\n      private_ip  = "10.2.160.10"\n    },\n  }\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"Because we don't have a one to one relationship between VPCs and subnets, like we did with internet gateways, we will reference our VPCs using their known key values with the vpc_key property (aws_vpc.vpc","[each.value.vpc_key]",".id) in or subnet map.  We also introduce using ternary expressions to set tag values:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'resource "aws_subnet" "i" {\n  for_each = local.subnets\n\n  vpc_id                  = aws_vpc.vpc[each.value.vpc_key].id\n  cidr_block              = each.value.cidr_block\n  map_public_ip_on_launch = each.value.public\n  availability_zone       = each.value.zone\n  tags = merge(\n    local.base_tags,\n    {\n      Name   = "${local.resource_prefix}-vpc-${each.key}-${each.value.public == "true" ? "public" : "private"}"\n      vpc    = "vpc-${each.value.vpc_key}"\n      access = each.value.public == "true" ? "public" : "private"\n    },\n  )\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"Subnet outputs are generated the same way:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'output "subnet_info" {\n  value = {\n    for k, subnet in local.subnets : k => subnet\n  }\n}\n\noutput "subnet_ids" {\n  value = {\n    for k, subnet in aws_subnet.i : k => subnet.id\n  }\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"producing"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'subnet_ids = {\n  "a_a" = "subnet-036d8021fa31a75df"\n  "a_b" = "subnet-0c591947f5e3ea68f"\n  "a_c" = "subnet-06719e47a1e6c8d4b"\n  "a_d" = "subnet-0f2ff9bca4118037d"\n  "a_e" = "subnet-0e0bd3a8ab72c77be"\n  "a_f" = "subnet-020cc27bd5f868929"\n  "b_a" = "subnet-0b9742bc7724f6d72"\n  "b_b" = "subnet-0b896d1d35a38eb43"\n  "b_c" = "subnet-0d67b9a34a9843c6a"\n  "b_d" = "subnet-077c4ff53836eab0d"\n  "b_e" = "subnet-094b9eac22a4bfcff"\n  "b_f" = "subnet-006fb422f4668983a"\n}\nsubnet_info = {\n  "a_a" = {\n    "api_ip" = "10.1.96.10"\n    "cidr_block" = "10.1.0.0/19"\n    "nat_gateway" = "true"\n    "public" = "true"\n    "vpc_key" = "a"\n    "zone" = "us-west-2a"\n  }\n  "a_b" = {\n    "api_ip" = "10.1.128.10"\n    "cidr_block" = "10.1.32.0/19"\n    "nat_gateway" = "false"\n    "public" = "true"\n    "vpc_key" = "a"\n    "zone" = "us-west-2b"\n  }\n  "a_c" = {\n    "api_ip" = "10.1.160.10"\n    "cidr_block" = "10.1.64.0/19"\n    "nat_gateway" = "false"\n    "public" = "true"\n    "vpc_key" = "a"\n    "zone" = "us-west-2c"\n  }\n  "a_d" = {\n    "cidr_block" = "10.1.96.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.1.96.10"\n    "public" = "false"\n    "vpc_key" = "a"\n    "zone" = "us-west-2a"\n  }\n  "a_e" = {\n    "cidr_block" = "10.1.128.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.1.128.10"\n    "public" = "false"\n    "vpc_key" = "a"\n    "zone" = "us-west-2b"\n  }\n  "a_f" = {\n    "cidr_block" = "10.1.160.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.1.160.10"\n    "public" = "false"\n    "vpc_key" = "a"\n    "zone" = "us-west-2c"\n  }\n  "b_a" = {\n    "api_ip" = "10.2.96.10"\n    "cidr_block" = "10.2.0.0/19"\n    "nat_gateway" = "true"\n    "public" = "true"\n    "vpc_key" = "b"\n    "zone" = "us-west-2a"\n  }\n  "b_b" = {\n    "api_ip" = "10.2.128.10"\n    "cidr_block" = "10.2.32.0/19"\n    "nat_gateway" = "false"\n    "public" = "true"\n    "vpc_key" = "b"\n    "zone" = "us-west-2b"\n  }\n  "b_c" = {\n    "api_ip" = "10.2.160.10"\n    "cidr_block" = "10.2.64.0/19"\n    "nat_gateway" = "false"\n    "public" = "true"\n    "vpc_key" = "b"\n    "zone" = "us-west-2c"\n  }\n  "b_d" = {\n    "cidr_block" = "10.2.96.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.2.96.10"\n    "public" = "false"\n    "vpc_key" = "b"\n    "zone" = "us-west-2a"\n  }\n  "b_e" = {\n    "cidr_block" = "10.2.128.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.2.128.10"\n    "public" = "false"\n    "vpc_key" = "b"\n    "zone" = "us-west-2b"\n  }\n  "b_f" = {\n    "cidr_block" = "10.2.160.0/19"\n    "nat_gateway" = "false"\n    "private_ip" = "10.2.160.10"\n    "public" = "false"\n    "vpc_key" = "b"\n    "zone" = "us-west-2c"\n  }\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"After creating our VPCs and Subnets we can then reference the outputs via remote state in a separate EC2 repository."),o.a.createElement(c.MDXTag,{name:"p",components:n},o.a.createElement("a",{p:4,href:"https://github.com/arthurdayton116/aws-terraform/tree/main/peering/terraform_ec2_dynamic",target:"_blank"},"Code located here")),o.a.createElement("br",null),o.a.createElement(c.MDXTag,{name:"p",components:n},"In our data.tf file we define these two local variables:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},"  subnet_ids  = data.terraform_remote_state.vpc.outputs.subnet_ids\n  subnet_info = data.terraform_remote_state.vpc.outputs.subnet_info\n")),o.a.createElement(c.MDXTag,{name:"p",components:n},'Then we can use these maps to create public and private instances of EC2 instances.  Here we demonstrate the use of a for loop (for k, subnet in local.subnet_info : k => subnet if subnet.public == "true") to filter our subnet info to only the public subnets.  The results of this filtered result set are fed to the for_each and allow us create ec2 instances for only our public subnets:'),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'resource "aws_instance" "public" {\n  for_each = { for k, subnet in local.subnet_info : k =>\n  subnet if subnet.public == "true" }\n\n  ami                    = var.ami_id\n  instance_type          = var.ami_instance_type\n  subnet_id              = local.subnet_ids[each.key]\n  vpc_security_group_ids = [aws_security_group.ec2_public[each.value.vpc_key].id]\n  key_name               = aws_key_pair.ec2key.key_name\n  iam_instance_profile   = local.s3_instance_profile_name\n  //  private_ip             = local.mc_private_ip\n\n  user_data = var.user_data\n\n  provisioner "file" {\n    source      = var.react_path\n    destination = "/tmp"\n\n    connection {\n      type        = "ssh"\n      user        = "ubuntu"\n      private_key = file(var.private_key_path)\n      host        = self.public_dns\n    }\n  }\n\n  provisioner "file" {\n    source      = var.go_api_path\n    destination = "/tmp"\n\n    connection {\n      type        = "ssh"\n      user        = "ubuntu"\n      private_key = file(var.private_key_path)\n      host        = self.public_dns\n    }\n  }\n\n  provisioner "file" {\n    source      = "goapi@.service"\n    destination = "~/goapi@.service"\n\n    connection {\n      type        = "ssh"\n      user        = "ubuntu"\n      private_key = file(var.private_key_path)\n      host        = self.public_dns\n    }\n  }\n\n  provisioner "file" {\n    source      = "dockerStart.sh"\n    destination = "~/dockerStart.sh"\n\n    connection {\n      type        = "ssh"\n      user        = "ubuntu"\n      private_key = file(var.private_key_path)\n      host        = self.public_dns\n    }\n  }\n\n  tags = merge(\n    local.base_tags,\n    {\n      Name = "${local.resource_prefix}-${each.key}-ec2_public"\n    },\n  )\n}\n')),o.a.createElement(c.MDXTag,{name:"p",components:n},"We do the same for private subnets and ultimately are able to create instances within all of our subnets using for_each to loop through the map outputs from our dynamic number of VPCs and Subnets:"),o.a.createElement(c.MDXTag,{name:"pre",components:n},o.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'key_id = "sample-company_publicKey"\nkey_name = "sample-company_publicKey"\npublic_ssh_link = {\n  "a_a" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@35.165.242.82"\n  "a_b" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@34.221.13.100"\n  "a_c" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@18.237.136.196"\n  "b_a" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@35.163.62.108"\n  "b_b" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@34.211.122.232"\n  "b_c" = "ssh -i ~/.ssh/id_rsa_ec2 ubuntu@54.186.21.110"\n}\nwebserver_ips = {\n  "a_a" = "35.165.242.82"\n  "a_b" = "34.221.13.100"\n  "a_c" = "18.237.136.196"\n  "b_a" = "35.163.62.108"\n  "b_b" = "34.211.122.232"\n  "b_c" = "54.186.21.110"\n}\nwebserver_link = {\n  "a_a" = "http://35.165.242.82"\n  "a_b" = "http://34.221.13.100"\n  "a_c" = "http://18.237.136.196"\n  "b_a" = "http://35.163.62.108"\n  "b_b" = "http://34.211.122.232"\n  "b_c" = "http://54.186.21.110"\n}\nwebserver_privateips = {\n  "a_a" = "10.1.5.23"\n  "a_b" = "10.1.50.207"\n  "a_c" = "10.1.77.83"\n  "b_a" = "10.2.0.88"\n  "b_b" = "10.2.42.2"\n  "b_c" = "10.2.95.69"\n}\n')),o.a.createElement(c.MDXTag,{name:"h5",components:n},"Conclusion"),o.a.createElement(c.MDXTag,{name:"p",components:n},"As this example shows Terraform can be used to dynamically create multiple types of interrelated resources using maps to create instance configurations and for_each loops to iterate over them."),o.a.createElement("br",null))}}}]);
//# sourceMappingURL=156.1326124f.chunk.js.map