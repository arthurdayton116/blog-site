# Deploys application to AWS
name: Build and Deploy Blog Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    # Specifies environment to use on GitHub - under Settings
    environment:
      name: development
      url: https://development
    # set environment variables
    env:
      # Setting CI to "" avoids issue with react scripts treating warnings as errors - probably should make this specific to GitHub environment
      # https://github.com/facebook/create-react-app/issues/3657
      CI: ""
      # var for what domain I'm using
      # secrets are from environment
      TF_VAR_base_domain: ${{ secrets.BASE_DOMAIN }}
      # override variables for conditionally run steps in this workflow file - START
      react_build_override: 'true'
      terraform_apply_override: 'false'
      s3_deploy_override: 'true'
      # override variables for conditionally run steps in this workflow file - END
      # sample users for testing authentication and groups with Cypress - START
      OKTA_AUTH_USERNAME_NONAPPROVER: ${{ secrets.OKTA_AUTH_USERNAME_NONAPPROVER }}
      OKTA_AUTH_PASSWORD_NONAPPROVER: ${{ secrets.OKTA_AUTH_PASSWORD_NONAPPROVER }}
      OKTA_AUTH_USERNAME_APPROVER: ${{ secrets.OKTA_AUTH_USERNAME_APPROVER }}
      OKTA_AUTH_PASSWORD_APPROVER: ${{ secrets.OKTA_AUTH_PASSWORD_APPROVER }}
      OKTA_DOMAIN: ${{ secrets.OKTA_DOMAIN }}
      OKTA_ISSUER_SUFFIX: ${{ secrets.OKTA_ISSUER_SUFFIX }}
      OKTA_ISSUER: https://${{ secrets.OKTA_DOMAIN }}${{ secrets.OKTA_ISSUER_SUFFIX }}
      # sample users for testing authentication and groups with Cypress - END
      # variables used in React build - these are NOT secret (NOTHING in React code is) even though they are stored that way - START
      REACT_APP_OKTA_DOMAIN: ${{ secrets.REACT_APP_OKTA_DOMAIN }}
      REACT_APP_OKTA_ISSUER_SUFFIX: ${{ secrets.REACT_APP_OKTA_ISSUER_SUFFIX }}
      REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}
      REACT_APP_CALLBACK_PATH: ${{ secrets.REACT_APP_CALLBACK_PATH }}
      # variables used in React build - these are NOT (NOTHING in React code is) secret even though they are stored that way - END
      # variables used in graphql lambda function - these ARE secret because they are only visible and used server(function) side - START
      TF_VAR_okta_client_id: ${{ secrets.OKTA_CLIENT_ID }}
      TF_VAR_okta_client_secret: ${{ secrets.OKTA_CLIENT_SECRET }}
      TF_VAR_okta_domain: ${{ secrets.REACT_APP_OKTA_DOMAIN }}
      TF_VAR_okta_issuer_suffix: ${{ secrets.REACT_APP_OKTA_ISSUER_SUFFIX }}
      TF_VAR_okta_audience: ${{ secrets.OKTA_AUDIENCE }}
      # variables used in graphql lambda function - these ARE secret because they are only visible and used server(function) side - END
      # Sets port for React when run for tests - START
      PORT: 3001
      # Sets port for React when run for tests - END

    # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idservices
    services:
      localDynamoTestContainer:
        image: amazon/dynamodb-local:1.17.0
        ports:
          - 8000:8000
        options: -v /home/runner/work/blog-site/dynamodb:/home/dynamodblocal/data  -w /home/dynamodblocal


    strategy:
      matrix:
        # this can be run for multiple versions of node if needed
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      # Checkout repo
      - uses: actions/checkout@v2
      # Checkout previous commit for compare
      # https://github.com/tj-actions/changed-files
      - name: Checkout into lastCommit
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          path: lastCommit


      ##############################
      # CHANGED DIRECTORIES - START #
      # THIS SECTION IS FOR CHECKING CHANGED DIRECTORIES #
      # Because I am using mono-repo approach and because passing stuff between jobs is painful
      # I am going to use a bunch of boiler plate - in larger org I would use a more modular approach
      # Check for changes to files for mono-repo
      # Thanks - https://github.com/tj-actions/changed-files
      ##############################

      ###############
      # TERRAFORM - START
      # set environment variable for determining if terraform apply should run

      # Compare terraform directory to previous commit
      - name: Get terraform changed files
        id: changed-files-terraform
        uses: tj-actions/changed-files@v10.1
        with:
          path: lastCommit
          files: |
            terraform/terraform_sns
            terraform/terraform_s3
            terraform/terraform_cf
            terraform/terraform_shared
            terraform/terraform_graphql
            terraform/terraform_dynamodb
            terraform/terraform_dns

      - name: Set tf_dir_changed var
        id: tfChanged_true
        if: steps.changed-files-terraform.outputs.all_changed_and_modified_files == 'true'
        run: echo "tf_dir_changed=true" >> $GITHUB_ENV

      - name: Set tf_dir_changed var
        id: tfChanged_false
        if: steps.changed-files-terraform.outputs.only_changed == 'false'
        run: echo "tf_dir_changed=false" >> $GITHUB_ENV

      # validate logic is working correctly
      - name: Run step if terraform files changed
        if: ${{ env.tf_dir_changed == 'true' }}
        run: |
          echo "terraform directory files have changed."

          for file in ${{ steps.changed-files-terraform.outputs.added_files }}; do
                      echo "$file was added"
          done

      - name: Run step if terraform files have not changed
        if: ${{ env.tf_dir_changed == 'false' }}
        run: echo "No terraform directory files have changed."

      # TERRAFORM END
      ###############

      ###############
      # SRC START
      # Compare src directory to previous commit - this is boiler plate and I could write a template for this
      - name: Get React changed files
        id: changed-files-src
        uses: tj-actions/changed-files@v10.1
        with:
          path: lastCommit
          files: ui/src

      # set environment variable for determining if React build should run
      - name: Set src_dir_changed var
        id: srcChanged_true
        if: steps.changed-files-src.outputs.only_changed == 'true'
        run: echo "src_dir_changed=true" >> $GITHUB_ENV

      - name: Set src_dir_changed var
        id: srcChanged_false
        if: steps.changed-files-src.outputs.only_changed == 'false'
        run: echo "src_dir_changed=false" >> $GITHUB_ENV

      # validate logic is working correctly
      - name: Run step if src files changed
        if: ${{ env.src_dir_changed == 'true' }}
        run: |
          echo "src directory files have changed."

          for file in ${{ steps.changed-files-src.outputs.all_changed_and_modified_files }}; do
                      echo "$file was changed"
          done

      - name: Run step if src files have not changed
        if: ${{ env.src_dir_changed == 'false' }}
        run: echo "No src directory files have changed."

      # SRC END
      ###############

      ##############################
      # CHANGED DIRECTORIES - END #
      ##############################


      # Installs specified version of terraform - I like to pin versions - would make sense to use a variable at org level
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # Need these for terraform and S3 push
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      ##############################
      # Create shared variables used by all terraform directories - START #
      ##############################
      # Always run
      - name: Terraform Format - terraform_shared
        id: fmt_shared
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_shared

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_shared
        id: init_shared
        run: terraform init
        working-directory: ./terraform/terraform_shared

      - name: Terraform Validate - terraform_shared
        id: validate_shared
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_shared

      # run conditionally
      - name: Terraform Apply - terraform_shared
        id: apply_shared
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_shared

      ##############################
      # Create shared - END #
      ##############################

      ##############################
      # Create SNS - START #
      ##############################
      # Always run format / validate and output commands but run apply only if files have changed
      - name: Terraform Format - terraform_sns
        id: fmt_sns
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_sns

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_sns
        id: init_sns
        run: terraform init
        working-directory: ./terraform/terraform_sns

      - name: Terraform Validate - terraform_sns
        id: validate_sns
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_sns

      # run conditionally
      - name: Terraform Apply - terraform_sns
        id: apply_sns
        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_sns

      # sets runner environment variable that can be used by subsequent steps
      - name: Set var from TF Output - terraform_sns
        id: setVarSNS
        run: |
          snst=$(terraform output topic_arn)
          echo "REACT_APP_SNS_ARN=$snst" >> $GITHUB_ENV
        working-directory: ./terraform/terraform_sns
      ##############################
      # Create SNS - END #
      ##############################

      ##############################
      # Create DynamoDB - START #
      ##############################
      # Always run format / validate and output commands but run apply only if files have changed
      - name: Terraform Format - terraform_dynamoDB
        id: fmt_ddb
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_dynamoDB

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_dynamoDB
        id: init_ddb
        run: terraform init
        working-directory: ./terraform/terraform_dynamoDB

      - name: Terraform Validate - terraform_dynamoDB
        id: validate_ddb
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_dynamoDB

      # run conditionally
      - name: Terraform Apply - terraform_dynamoDB
        id: apply_ddb
        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_dynamoDB

      ##############################
      # Create DynamoDB - END #
      ##############################

      ##############################
      # Create Lambda - START #
      ##############################
      - name: run graphql source build
        id: build_graphql
        run: |
          yarn install
        working-directory: ./terraform/terraform_graphql/function/src

#      - name: run tests
#        id: zip_graphql
#        run: |
#          yarn install
#          yarn test
#        working-directory: ./terraform_graphql/function/src

      - name: zip graphql src
        id: zip_graphql
        run: |
          echo "#######################"
          ./gql_buildpackage.sh
          echo "#######################"
        working-directory: ./terraform/terraform_graphql/function
      # Always run format / validate and output commands but run apply only if files have changed
      - name: Terraform Format
        id: fmt_gql
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_graphql

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_graphql
        id: init_gql
        run: terraform init
        working-directory: ./terraform/terraform_graphql

      - name: Terraform Validate - terraform_graphql
        id: validate_gql
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_graphql

      # run conditionally
      - name: Terraform Apply - terraform_graphql
        id: apply_gql
        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_graphql

      - name: Set var from TF Output
        id: setVarGraphQl
        run: |
          gqe=$(terraform output graphql_domain_endpoint)
          echo "REACT_APP_GRAPHQL_ENDPOINT=$gqe" >> $GITHUB_ENV
        working-directory: ./terraform/terraform_graphql

      ##############################
      # Create GraphQL Lambda - END #
      ##############################

      ##############################
      # Create S3  Buckets - START #
      ##############################
      # Always run format / validate and output commands but run apply only if files have changed
      - name: Terraform Format - terraform_s3
        id: fmt_s3
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_s3

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_s3
        id: init_s3
        run: terraform init
        working-directory: ./terraform/terraform_s3

      - name: Terraform Validate - terraform_s3
        id: validate_s3
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_s3

      # run conditionally
      - name: Terraform Apply - terraform_s3
        id: apply_s3
        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_s3

      # get bucket name from terraform state and set environment variable
      # thank you - https://blog.nillsf.com/index.php/2020/08/25/how-to-use-terraform-output-in-a-github-action/
      - name: Set var from TF Output
        id: setVar
        run: |
          bucket_name=$(terraform output bucket_name)
          echo "bucket_name=$bucket_name" >> $GITHUB_ENV
        working-directory: ./terraform/terraform_s3

      # bucket name is masked because it comes form a secret but values are passed to other steps
      - run: |
          echo "#######################"
          echo "Should appear masked"
          echo "bucket name - ${{ env.bucket_name }}"
          echo "#######################"

      ##############################
      # Create S3  Buckets - END #
      ##############################

      ##############################
      # Run E2E - Start #
      ##############################
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: ui/yarn.lock

      # build React project
      - name: React Yarn Install
        run: yarn install --frozen-lockfile
        working-directory: ./ui

      # start test ui server
      - run: yarn start &
        working-directory: ./ui

      # start test graphql server
      - run: node index.js &
        working-directory: ./terraform/terraform_graphql/function/src

      - name: Test gql
        run: |
          sleep 20 &&
              curl --request POST --header 'content-type: application/json' --url http://localhost:4000/graphql --data '{"query":"query Query {\n  hello\n}"}'

      - name: Test 3001
        run: |
          sleep 20 &&
          curl http://localhost:3001

      # run tests
      # https://docs.cypress.io/guides/continuous-integration/github-actions
      # https://github.com/marketplace/actions/cypress-io
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          config-file: ui/cypress.json
          working-directory: ./ui



      ##############################
      # Run E2E  - End #
      ##############################

      ##############################
      # Build React Project - Start #
      ##############################
      # set up to build React project


      # build React project
#      - name: React Yarn Install
#        run: yarn install --frozen-lockfile
#        working-directory: ./ui

      - name: Check vulnerabilities
        id: chech_vulns
        run: npx audit-ci --config vulns/audit-ci.json
        working-directory: ./ui

      # run conditionally
      - name: Yarn build
        if: ${{ env.src_dir_changed == 'true' || env.react_build_override == 'true' }}
        run: yarn run build --if-present
        working-directory: ./ui
#      - run: ls
#      - run: ls ./build
#     - run: npm test

      - name: Deploy static site to S3 bucket
        if: ${{ env.src_dir_changed == 'true' || env.s3_deploy_override == 'true'}}
        env:
          aws_bucket_name: ${{ secrets.AWS_BUCKET_NAME }}
        run: aws s3 sync ../../ui/build/ s3://"${{ env.bucket_name }}" --delete
        working-directory: ./terraform/terraform_s3

      # TODO - Add Cypress tests

      ##############################
      # Build React Project - END #
      ##############################

      ##############################
      # Create CloudFront Distribution - START #
      ##############################
      # Always run format / validate and output commands but run apply only if files have changed
      - name: Terraform Format - terraform_cf
        id: fmt_cf
        run: |
          terraform fmt -check
        working-directory: ./terraform/terraform_cf

      # Init using workspace from Terraform Cloud
      - name: Terraform Init - terraform_cf
        id: init_cf
        run: terraform init
        working-directory: ./terraform/terraform_cf

      - name: Terraform Validate - terraform_cf
        id: validate_cf
        run: terraform validate -no-color
        working-directory: ./terraform/terraform_cf

      # run conditionally
      - name: Terraform Apply - terraform_cf
        id: apply_cf
        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
        run: terraform apply -auto-approve
        continue-on-error: false
        working-directory: ./terraform/terraform_cf

      ##############################
      # Create CloudFront Distribution - END #
      ##############################


