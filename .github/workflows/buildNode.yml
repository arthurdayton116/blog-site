# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  call-terraform:
    uses: arthurdayton116/blog-site/.github/workflows/terraform-wf.yml@main
    with:
      terraform_directory: terraform
      environment: development
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_base_domain: ${{ secrets.BASE_DOMAIN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  build:
    runs-on: ubuntu-latest
    environment: development
    needs: call-terraform
    # set environment variables
    env:
      # Setting CI to "" avoids issue with react scripts treating  warnings as errors - probably should make this specific to GitHub environment
      # https://github.com/facebook/create-react-app/issues/3657
      CI: ""
      # var for what domain I'm using
      TF_VAR_base_domain: ${{ secrets.BASE_DOMAIN }}
      # override variables for conditionally run steps
      react_build_override: 'false'
      terraform_apply_override: 'false'
      s3_deploy_override: 'false'

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2

      # Checkout previous commit for compare
      # https://github.com/tj-actions/changed-files
      - name: Checkout into lastCommit
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          path: lastCommit

      # Compare terraform directory to previous commit
      - name: Get terraform changed files
        id: changed-files-terraform
        uses: tj-actions/changed-files@v10.1
        with:
          path: lastCommit
          files: |
            terraform

      # set environment variable for determining if terraform apply should run
      # https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#setting-an-environment-variable
      - name: Set tf_dir_changed var
        id: tfChanged_true
        if: steps.changed-files-terraform.outputs.all_changed_and_modified_files == 'true'
        run: |
          echo "tf_dir_changed=true" >> $GITHUB_ENV

      - name: Set tf_dir_changed var
        id: tfChanged_false
        if: steps.changed-files-terraform.outputs.only_changed == 'false'
        run: |
          echo "tf_dir_changed=false" >> $GITHUB_ENV

      # validate logic is working correctly
      - name: Run step if terraform files changed
        if: ${{ env.tf_dir_changed == 'true' }}
        run: |
          echo "terraform directory files have changed."

          for file in ${{ steps.changed-files-terraform.outputs.added_files }}; do
                      echo "$file was added"
          done

      - name: Run step if terraform files have not changed
        if: ${{ env.tf_dir_changed == 'false' }}
        run: |
          echo "No terraform directory files have changed."

#      # Installs specified version of terraform - I like to pin versions - would make sense to use a variable at org level
#      - uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: 1.0.9
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#          terraform_wrapper: false

      # Need these for terraform and S3 push
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      # Always run format / validate and output commands but run apply only if files have changed
#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check
#        working-directory: ./terraform
#
#      # Init using workspace from Terraform Cloud
#      - name: Terraform Init
#        id: init
#        run: terraform init
#        working-directory: ./terraform
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#        working-directory: ./terraform
#
#      # run conditionally
#      - name: Terraform Apply
#        id: apply
#        if: ${{ env.tf_dir_changed == 'true' || env.terraform_apply_override == 'true' }}
#        run: terraform apply -auto-approve
#        continue-on-error: true
#        working-directory: ./terraform

      # get bucket name from terraform state and set environment variable
      # thank you - https://blog.nillsf.com/index.php/2020/08/25/how-to-use-terraform-output-in-a-github-action/
      - name: Set var from TF Output
        id: setVar
        run: |
          bucket_name=$(terraform output bucket_name)
          echo "bucket_name=$bucket_name" >> $GITHUB_ENV
        working-directory: ./terraform

      # bucket name is masked because it comes form a secret but values are passed to other steps
      - run: |
          echo "#######################"
          echo "Should appear masked"
          echo "bucket name - ${{ env.bucket_name }}"
          echo "#######################"

      # set up to build React project
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # Compare src directory to previous commit - this is boiler plate and I could write a template for this
      - name: Get React changed files
        id: changed-files-src
        uses: tj-actions/changed-files@v10.1
        with:
          path: lastCommit
          files: |
            src

      # set environment variable for determining if React build should run
      - name: Set src_dir_changed var
        id: srcChanged_true
        if: steps.changed-files-src.outputs.only_changed == 'true'
        run: |
          echo "src_dir_changed=true" >> $GITHUB_ENV

      - name: Set src_dir_changed var
        id: srcChanged_false
        if: steps.changed-files-src.outputs.only_changed == 'false'
        run: |
          echo "src_dir_changed=false" >> $GITHUB_ENV

      # validate logic is working correctly
      - name: Run step if src files changed
        if: ${{ env.src_dir_changed == 'true' }}
        run: |
          echo "src directory files have changed."

          for file in ${{ steps.changed-files-src.outputs.all_changed_and_modified_files }}; do
                      echo "$file was changed"
          done

      - name: Run step if src files have not changed
        if: ${{ env.src_dir_changed == 'false' }}
        run: |
          echo "No src directory files have changed."

      # build React project
      - name: Yarn Install
        run: yarn install --frozen-lockfile

      # run conditionally
      - name: Yarn build
        if: ${{ env.src_dir_changed == 'true' || env.react_build_override == 'true' }}
        run: yarn run build --if-present
#      - run: ls
#      - run: ls ./build
#     - run: npm test


      - name: Deploy static site to S3 bucket
        if: ${{ env.src_dir_changed == 'true' || env.s3_deploy_override == 'true'}}
        env:
          aws_bucket_name: ${{ secrets.AWS_BUCKET_NAME }}
        run: aws s3 sync ../build/ s3://"${{ env.bucket_name }}" --delete
        working-directory: ./terraform
